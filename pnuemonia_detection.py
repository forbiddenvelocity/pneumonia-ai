# -*- coding: utf-8 -*-
"""Pnuemonia Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x9UNINGGwEuaRUVtUbpW_c1acTW-Wm1x
"""

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

!kaggle datasets download -d paultimothymooney/chest-xray-pneumonia

import zipfile
zip_ref = zipfile.ZipFile('/content/chest-xray-pneumonia.zip','r')
zip_ref.extractall('/content')
zip_ref.close()

import tensorflow as tf
from tensorflow import keras
from keras.models import Sequential
import matplotlib.pyplot as plt
from keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, BatchNormalization, Dropout
import cv2

img = cv2.imread('content/chest-xray-pneumonia.jpg')

train_ds = keras.utils.image_dataset_from_directory(
    directory = '/content/chest_xray/train',
    labels='inferred',
    label_mode = 'int',
    batch_size=32,
    image_size=(100,100)
)

validation_ds = keras.utils.image_dataset_from_directory(
    directory = '/content/chest_xray/test',
    labels='inferred',
    label_mode = 'int',
    batch_size=32,
    image_size=(100,100)
)

def process(image,label):
    image = tf.cast(image/100. ,tf.float32)
    return image,label

train_ds = train_ds.map(process)
validation_ds = validation_ds.map(process)

img1 = cv2.imread('/content/chest_xray/test/NORMAL/IM-0005-0001.jpeg')
img2 =cv2.imread('/content/chest_xray/test/NORMAL/IM-0015-0001.jpeg')
img3 = cv2.imread('/content/chest_xray/test/PNEUMONIA/person100_bacteria_479.jpeg')
img4 = cv2.imread('/content/chest_xray/test/PNEUMONIA/person103_bacteria_489.jpeg')

list = [img1, img2, img3, img4]

plt.imshow(img4)

img3.

model = Sequential([
    Conv2D(32, 3, input_shape=(100,100,3), activation='relu'),
    MaxPooling2D(),
    Conv2D(16, 3, activation='relu'),
    MaxPooling2D(),
    Conv2D(16, 3, activation='relu'),
    MaxPooling2D(),
    Flatten(),
    Dense(512, activation='relu'),
    Dense(256, activation='relu'),
    Dense(1, activation='sigmoid')
])

model.summary()

model.compile(optimizer = 'adam', loss=tf.keras.losses.BinaryCrossentropy(), metrics=['accuracy'])

model.fit(train_ds,epochs=5,validation_data=validation_ds)

plt.plot(model.history.history['accuracy'], label = 'train accuracy')
plt.plot(model.history.history['val_accuracy'],label = 'test_accuracy')
plt.legend()
plt.show()

plt.plot(model.history.history['loss'], label = 'train loss')
plt.plot(model.history.history['val_loss'],label = 'test_loss')
plt.legend()
plt.show()

print(img3.shape)

new_img_path = '/content/chest_xray/test/PNEUMONIA/person112_bacteria_538.jpeg'
new_img = cv2.imread(new_img_path)
new_img = tf.cast(new_img/100. ,tf.float32)
new_img = tf.image.resize(new_img, (100, 100))
new_img = tf.expand_dims(new_img, axis=0)

prediction = model.predict(new_img)

if prediction[0][0] >= 0.5:
    prediction_label = 'Pneumonia'
else:
    prediction_label = 'Normal'

print(f"Prediction: {prediction_label}")

new_img_path = '/content/chest_xray/test/NORMAL/IM-0010-0001.jpeg'
new_img = cv2.imread(new_img_path)
new_img = tf.cast(new_img/100. ,tf.float32)
new_img = tf.image.resize(new_img, (100, 100))
new_img = tf.expand_dims(new_img, axis=0)

prediction = model.predict(new_img)

if prediction[0][0] >= 0.5:
    prediction_label = 'Pneumonia'
else:
    prediction_label = 'Normal'

print(f"Prediction: {prediction_label}")